package utils

import "regexp"

var (
	PreRgx    = regexp.MustCompile("(?m)^```\\w*$")
	HeaderRgx = regexp.MustCompile(`(?m)^(?:\\#)+ (.+?)$`)
	SubSupRgx = regexp.MustCompile(`_\{(.+?)\}\^\{(.+?)\}`)
	BoldRgx   = regexp.MustCompile(`[^\\]\*[\s\S]+?[^\\]\*`)
	LinkRgx   = regexp.MustCompile(`\\\[(.+?)\\]\\\((.+?)\\\)`)
	CodeRgx   = regexp.MustCompile("[^\\\\]`[\\s\\S]+?[^\\\\]`")
	LaTeXRgx  = regexp.MustCompile(`\\[(\[]\s*([\s\S]+?)\s*\\[)\]]`)
	FracRgx   = regexp.MustCompile(`\w+/\w+|\w+/\(.+?\)|\(.+?\)/\w+|\(.+?\)/\(.+?\)`)
	TableRgx  = regexp.MustCompile("(?m)(^```.*$\\s*)?(^\\|.*\\|$\\s*^\\|[-| :]*\\|$\\s*)(^\\|.*\\|$\\s*)*(^```$\\s*)?")
)

var PreProcessing = [][]any{
	{regexp.MustCompile(`\\cot`), `cot`},
	{regexp.MustCompile(`\\det`), `det`},

	{regexp.MustCompile(`\\(?:times|cross)`), `×`},
	{regexp.MustCompile(`\\cdot`), `·`},
	{regexp.MustCompile(`\\div`), `÷`},
	{regexp.MustCompile(`\\implies`), `⇒`},
	{regexp.MustCompile(`\\[cd]?frac ?\{`), `\frac{`},

	{regexp.MustCompile(`\\mod\{(.+?)\}`), `mod $1`},
	{regexp.MustCompile(`\\pmod\{(.+?)\}`), `(mod $1)`},
	{regexp.MustCompile(`\\cancelto\{(.+?)\}`), `→ $1`},
	{regexp.MustCompile(`\\xrightarrow\{(.+?})\}`), `+ $1 →`},

	{regexp.MustCompile(`P\{(.+?)\}\{(.+?)\}`), `P($1; $2)`},
	{regexp.MustCompile(`\{(.+?) \\choose (.+?)\}`), `C($1; $2)`},
	{regexp.MustCompile(`\\(?:C|binom)\{(.+?)\}\{(.+?)\}`), `C($1; $2)`},
}

var PostProcessing = [][]string{
	{`_0`, `₀`}, {`_1`, `₁`}, {`_2`, `₂`}, {`_3`, `₃`}, {`_4`, `₄`}, {`_5`, `₅`}, {`_6`, `₆`}, {`_7`, `₇`},
	{`_8`, `₈`}, {`_9`, `₉`}, {`_a`, `ₐ`}, {`_e`, `ₑ`}, {`_h`, `ₕ`}, {`_i`, `ᵢ`}, {`_j`, `ⱼ`}, {`_k`, `ₖ`},
	{`_l`, `ₗ`}, {`_m`, `ₘ`}, {`_n`, `ₙ`}, {`_o`, `ₒ`}, {`_p`, `ₚ`}, {`_r`, `ᵣ`}, {`_s`, `ₛ`}, {`_t`, `ₜ`},
	{`_u`, `ᵤ`}, {`_v`, `ᵥ`}, {`_x`, `ₓ`}, {`_y`, `ᵧ`}, {`_-`, `₋`}, {`_+`, `₊`}, {`_=`, `₌`}, {`_*`, `⁎`},
	{`_π`, `ₚᵢ`},

	{`^0`, `⁰`}, {`^1`, `¹`}, {`^2`, `²`}, {`^3`, `³`}, {`^4`, `⁴`}, {`^5`, `⁵`}, {`^6`, `⁶`}, {`^7`, `⁷`},
	{`^8`, `⁸`}, {`^9`, `⁹`}, {`^a`, `ᵃ`}, {`^b`, `ᵇ`}, {`^c`, `ᶜ`}, {`^d`, `ᵈ`}, {`^e`, `ᵉ`}, {`^f`, `ᶠ`},
	{`^g`, `ᵍ`}, {`^h`, `ʰ`}, {`^i`, `ⁱ`}, {`^j`, `ʲ`}, {`^k`, `ᵏ`}, {`^l`, `ˡ`}, {`^m`, `ᵐ`}, {`^n`, `ⁿ`},
	{`^o`, `ᵒ`}, {`^p`, `ᵖ`}, {`^r`, `ʳ`}, {`^s`, `ˢ`}, {`^t`, `ᵗ`}, {`^u`, `ᵘ`}, {`^v`, `ᵛ`}, {`^w`, `ʷ`},
	{`^x`, `ˣ`}, {`^y`, `ʸ`}, {`^z`, `ᶻ`}, {`^A`, `ᴬ`}, {`^B`, `ᴮ`}, {`^D`, `ᴰ`}, {`^E`, `ᴱ`}, {`^G`, `ᴳ`},
	{`^H`, `ᴴ`}, {`^I`, `ᴵ`}, {`^J`, `ᴶ`}, {`^K`, `ᴷ`}, {`^L`, `ᴸ`}, {`^M`, `ᴹ`}, {`^N`, `ᴺ`}, {`^O`, `ᴼ`},
	{`^P`, `ᴾ`}, {`^R`, `ᴿ`}, {`^T`, `ᵀ`}, {`^U`, `ᵁ`}, {`^V`, `ⱽ`}, {`^W`, `ᵂ`}, {`^-`, `⁻`}, {`^+`, `⁺`},
	{`^=`, `⁼`}, {`^*`, `ˣ`}, {`^π`, `ᵖⁱ`}, {`^∘`, `°`},
}

var Subscripts = map[rune]string{
	'0': `₀`, '1': `₁`, '2': `₂`, '3': `₃`, '4': `₄`, '5': `₅`, '6': `₆`, '7': `₇`,
	'8': `₈`, '9': `₉`, 'a': `ₐ`, 'e': `ₑ`, 'h': `ₕ`, 'i': `ᵢ`, 'j': `ⱼ`, 'k': `ₖ`,
	'l': `ₗ`, 'm': `ₘ`, 'n': `ₙ`, 'o': `ₒ`, 'p': `ₚ`, 'r': `ᵣ`, 's': `ₛ`, 't': `ₜ`,
	'u': `ᵤ`, 'v': `ᵥ`, 'x': `ₓ`, 'y': `ᵧ`, '-': `₋`, '+': `₊`, '=': `₌`, '*': `⁎`,
	'π': `ₚᵢ`, '(': `₍`, ')': `₎`, ' ': ` `,
}

var Superscripts = map[rune]string{
	'0': `⁰`, '1': `¹`, '2': `²`, '3': `³`, '4': `⁴`, '5': `⁵`, '6': `⁶`, '7': `⁷`,
	'8': `⁸`, '9': `⁹`, 'a': `ᵃ`, 'b': `ᵇ`, 'c': `ᶜ`, 'd': `ᵈ`, 'e': `ᵉ`, 'f': `ᶠ`,
	'g': `ᵍ`, 'h': `ʰ`, 'i': `ⁱ`, 'j': `ʲ`, 'k': `ᵏ`, 'l': `ˡ`, 'm': `ᵐ`, 'n': `ⁿ`,
	'o': `ᵒ`, 'p': `ᵖ`, 'r': `ʳ`, 's': `ˢ`, 't': `ᵗ`, 'u': `ᵘ`, 'v': `ᵛ`, 'w': `ʷ`,
	'x': `ˣ`, 'y': `ʸ`, 'z': `ᶻ`, 'A': `ᴬ`, 'B': `ᴮ`, 'D': `ᴰ`, 'E': `ᴱ`, 'G': `ᴳ`,
	'H': `ᴴ`, 'I': `ᴵ`, 'J': `ᴶ`, 'K': `ᴷ`, 'L': `ᴸ`, 'M': `ᴹ`, 'N': `ᴺ`, 'O': `ᴼ`,
	'P': `ᴾ`, 'R': `ᴿ`, 'T': `ᵀ`, 'U': `ᵁ`, 'V': `ⱽ`, 'W': `ᵂ`, '-': `⁻`, '+': `⁺`,
	'=': `⁼`, '*': `ˣ`, 'π': `ᵖⁱ`, '∘': `°`, '(': `⁽`, ')': `⁾`, ' ': ` `,
}
